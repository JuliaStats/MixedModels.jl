# Parametric bootstrap for linear mixed-effects models

Julia is well-suited to implementing bootstrapping and other simulation-based methods for statistical models.
The `parametricbootstrap` function in the [MixedModels package](https://github.com/JuliaStats/MixedModels.jl) provides an efficient parametric bootstrap for linear mixed-effects models.

## The parametric bootstrap

[Bootstrapping](https://en.wikipedia.org/wiki/Bootstrapping_(statistics)) is a family of procedures
for generating sample values of a statistic, allowing for visualization of the distribution of the
statistic or for inference from this sample of values.

A _parametric bootstrap_ is used with a parametric model, `m`, that has been fit to data.
The procedure is to simulate `n` response vectors from `m` using the estimated parameter values
and refit `m` to these responses in turn, accumulating the statistics of interest at each iteration.

The parameters of a `LinearMixedModel` object are the fixed-effects
parameters, `β`, the standard deviation, `σ`, of the per-observation noise, and the covariance
parameter, `θ`, that defines the variance-covariance matrices of the random effects.

For example, a simple linear mixed-effects model for the `Dyestuff` data in the [`lme4`](http://github.com/lme4/lme4)
package for [`R`](https://www.r-project.org) is fit by

```julia
using DataFrames, Gadfly, MixedModels, Random, RData
testdir = normpath(joinpath(dirname(pathof(MixedModels)), "..", "test"));
const dat = Dict(Symbol(k)=>v for (k,v) in load(joinpath(testdir, "dat.rda")));
```

```julia
ds = names!(dat[:Dyestuff], [:Batch, :Yield])  # the Dyestuff data
m1 = fit(MixedModel, @formula(Yield ~ 1 + (1 | Batch)), ds)
```

To bootstrap the model parameters, first initialize a random number generator

```julia
rng = MersenneTwister(1234321);
```

then create a bootstrap sample

```julia
samp = parametricbootstrap(rng, 10_000, m1);
propertynames(samp)
```

As shown above, the sample has several named properties, which allow for convenient extraction of information.  For example, a density plot of the estimates of `σ`, the residual standard deviation, can be created as
```{julia;label="sigmadensity";fig_width=7;fig_height=4;fig_ext=".svg"}
plot(x=samp.σ, Geom.density, Guide.xlabel("Parametric bootstrap estimates of σ"))
```
For the estimates of the intercept parameter, the `getproperty` extractor must be used
```{julia;label="betadensity";fig_width=7;fig_height=4;fig_ext=".svg"}
plot(x = getproperty(samp, Symbol("(Intercept)")), Geom.density,
    Guide.xlabel("Parametric bootstrap estimates of β₁"))
```

The `σs` property contains the estimates of the standard deviation of the random effects in a hierarchical format.
```julia
typeof(samp.σs)
```

This is to allow for random effects associated with more than one grouping factor.
If we only have one grouping factor for random effects, which is the case here, we can use the `first` extractor, as in
```julia
first(samp.σs)
```
or, to carry this one step further,
```{julia;label="sigma1density";fig_width=7;fig_height=4;fig_ext=".svg"}
plot(x=first.(first(samp.σs)), Geom.density,
    Guide.xlabel("Parametric bootstrap estimates of σ₁"))
```

Notice that this density plot has a spike, or mode, at zero.
Although this mode appears to be diffuse, this is an artifact of the way that density plots are created.
In fact, it is a pulse, as can be seen from a histogram.

```{julia;label="sigma1histogram";fig_width=7;fig_height=4;fig_ext=".svg"}
plot(x=first.(first(samp.σs)), Geom.histogram,
    Guide.xlabel("Parametric bootstrap estimates of σ₁"))
```
