# Simulation of Subject-Item mixed models

Following the publication of Barr et al. (2011) there has been considerable interest in simulation of subject-item types of data from mixed-effects models to assess the effect of the choice of random-effects structure on the Type I error of tests on the fixed-effects.
Here we show how such simulations can be carried out efficiently using the [`MixedModels` package](https://github.com/dmbates/MixedModels.jl) for [`Julia`](https://julialang.org).

## Data characteristics

The data characteristics are those from _Maybe maximal: Good enough mixed models optimize power while controlling Type I error_ by Seedorff, Oleson and McMurray, which is just one example of such a study.
There are 50 subjects, 25 from each of two age groups which we will denote by `y` (younger) and `O` (older).
Each subject's response is measured on 5 different occasions on each of 20 different items under two noise conditions, `n` (low noise) and `N` (high noise).
Such an experimental design yields a total of 10,000 measurements.

In the `DataFrame` for this experimental design, the 25 younger subjects are labelled `'a'` to `'y'` while the older subjects are `'A'` to `'Y'` and the items are `'A'` to `'T'`.
```{julia;term=true}
using DataFrames, FreqTables, MixedModels, StatsModels, Tables
df = DataFrame(S = repeat(['a':'y'; 'A':'Y'], inner=40, outer=5),
    Age = repeat(['y','O'], inner=1000, outer=5),
    I = repeat('A':'T', inner=2, outer=250),
    Noise = repeat(['n','N'], outer=5000),
    Y = randn(10000))
describe(df)
freqtable(df, :Age, :S)
freqtable(df, :I, :S)
freqtable(df, :Noise, :S)
freqtable(df, :Noise, :I)
```
The dummy response column `Y` is added as a placeholder.

Frequency tables (i.e. cross-tabulations) allow for checking the structure of the design
```{julia;term=true}
freqtable(df, 

## Creating a LinearMixedModel and simulating a response

A `LinearMixedModel` with fixed-effects `Age` and `Noise` and their interaction and with random intercepts `S` and `I` is created as
```{julia;term=true}
m1 = LinearMixedModel(@formula(Y ~ 1 + Age * Noise + (1|S) + (1|I)), df, Dict(:Age => HelmertCoding(), :Noise => HelmertCoding()));
first(m1.feterms).x
```