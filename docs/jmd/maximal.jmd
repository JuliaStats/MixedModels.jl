---
title: Simulation of Subject-Item mixed models
author: Douglas Bates
date: 2019-12-01
---
Following the publication of Barr et al. (2011) there has been considerable interest in simulation of subject-item types of data from mixed-effects models to assess the effect of the choice of random-effects structure on the Type I error of tests on the fixed-effects.
Here we show how such simulations can be carried out efficiently using the [`MixedModels`](https://github.com/dmbates/MixedModels.jl) package for [`Julia`](https://julialang.org).

## Data characteristics

The data characteristics for this simulation are those from the paper _Maybe maximal: Good enough mixed models optimize power while controlling Type I error_ by Seedorff, Oleson and McMurray, which is just one example of such a study.
There are 50 subjects, 25 from each of two age groups, which are denoted by `'O'` (older) and `'Y'` (younger).
Each subject's response is measured on 5 different occasions on each of 20 different items under two noise conditions, `'Q'` (quiet) and `'N'` (noisy).
Such an experimental design yields a total of 10,000 measurements.

In the data for this experimental design, the 25 younger subjects are labelled `'a'` to `'y'` while the older subjects are `'A'` to `'Y'` and the items are `'A'` to `'T'`.
```{julia}
using DataFrames, Distributions, FreqTables, Gadfly, MixedModels, Random, StatsModels, Tables
```
```{julia}
df = (S = repeat(['A':'Y'; 'a':'y'], inner=40, outer=5),
    Age = repeat(['O','Y'], inner=1000, outer=5),
    I = repeat('A':'T', inner=2, outer=250),
    Noise = repeat(['Q','N'], outer=5000),
    Y = ones(10000));
```
The response column, `Y`, is added as a placeholder.

#### ColumnTable versus DataFrame

`df` is a `NamedTuple`, which is similar to a `list` in `R` except that the names are `Symbol`s, not `String`s,
```{julia}
typeof(df)
```
It is easily converted to a `DataFrame` if desired.
```julia
DataFrame(df)
```

The trend in Julia packages supporting data science, like the `StatsModels` package, is towards data representations as "column tables" (a `NamedTuple` of arrays) or "row tables" (a vector of `NamedTuple`s).
Sometimes it is convenient to work on individual columns, sometimes it makes more sense to iterate over rows.
The `columntable` and `rowtable` functions allow for conversion back and forth between the two representations.

```{julia}
rowtable(df)
```

`DataFrames.describe` provides a convenient summary of a `DataFrame`.
```julia
describe(DataFrame(df))
```

#### Checking properties of the design

It is worthwhile checking that the design has the desired properties.
`S` (subject) and `I` (item) should be balanced, which can be checked in a cross-tabulation
```{julia;eval=false}
freqtable(df, :I, :S)
```
```
20×50 Named Array{Int64,2}
I ╲ S │ 'A'  'B'  'C'  'D'  'E'  'F'  'G'  'H'  'I'  'J'  'K'  'L'  'M'  'N'  …  'l'  'm'  'n'  'o'  'p'  'q'  'r'  's'  't'  'u'  'v'  'w'  'x'  'y'
──────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
'A'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10  …   10   10   10   10   10   10   10   10   10   10   10   10   10   10
'B'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'C'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'D'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'E'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'F'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'G'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'H'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'I'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'J'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'K'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'L'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'M'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'N'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'O'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'P'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'Q'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'R'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'S'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10      10   10   10   10   10   10   10   10   10   10   10   10   10   10
'T'   │  10   10   10   10   10   10   10   10   10   10   10   10   10   10  …   10   10   10   10   10   10   10   10   10   10   10   10   10   10
```
or, more compactly,
```julia
all(freqtable(df, :I, :S) .== 10)
```

Checking on the experimental variables, `Age` does not vary within levels of `S`
```julia
freqtable(df, :Age, :S)
```
However, `Age` does vary within levels of `I`
```julia
freqtable(df, :Age, :I)
```
and `Noise` varies within levels of `S`
```julia
freqtable(df, :Noise, :S)
```
and within levels of `I`
```julia
freqtable(df, :Noise, :I)
```

## Creating a LinearMixedModel

A `LinearMixedModel` with fixed-effects for `Age` and `Noise` and for their interaction and with random intercepts for `S` and `I` is created as
```{julia}
contrasts = Dict(:Age => HelmertCoding(), :Noise => HelmertCoding());
m1 = LinearMixedModel(@formula(Y ~ 1 + Age * Noise + (1|S) + (1|I)), df, contrasts = contrasts);
m1.X                               # model matrix for fixed-effects terms
```

#### HelmertCoding of contrasts

The third argument in the call to `LinearMixedModel` is a dictionary of "contrasts" to use when forming the contrasts for categorical covariates.
`HelmertCoding` applied to a 2-level factor creates a  `±1` coding of the levels, as shown in the display of the model matrix.
With this coding the `(Intercept)` coefficient will be a "typical" response level without regard to `Age` and `Noise`.
In other words, the `(Intercept)` is not defined with respect to an arbitrary reference level for the categorical covariates.
Note that when 2-level factors are coded as `±1` the interaction terms also have a `±1` coding.

Sometimes coefficient estimates are called the "effect" of the condition in the covariate, e.g. "Noise" versus "Quiet".
For the `HelmertCoding` the "effect" of changing from the lower level to the higher level is twice the coefficient, because the distance between the `±1` values in the model matrix is 2.

## Simulating a response and fitting the model

The `MixedModels.simulate!` function installs a simulated response in the model object, given values of the parameters.

```{julia}
rng = Random.MersenneTwister(2052162715);  # repeatable random number generator
refit!(simulate!(rng, m1, β = [1000., 0, 0, 0], σ = 200., θ = [0.5, 0.5]))
```

The parameters are `β`, the fixed-effects coefficients, `σ`, the standard deviation of the per-observation, or "residual", noise term and `θ`, the parameters in the lower Cholesky factor of the relative covariance matrices for the random effects terms.

In this case, both random-effects terms are simple, scalar random effects with standard deviations of $100 = 200 * 0.5$.

Notice that the estimated standard deviations, 98.014 and 101.665 for the random effects and 199.16 for the residual noise, are very close to the values in the simulation.

Similarly, the estimates of the fixed-effects are quite close to the values in the simulation.

#### REML estimates

To use the REML criterion instead of maximum likelihood for parameter optimization, add the optional `REML` argument.
```{julia}
refit!(m1, REML=true)
```

Because the experimental design is balanced across subjects, items, age and noise, the fixed-effects parameter estimates are the same under ML or under REML.
This does not need to be the case for unbalanced designs.

The REML standard errors of the fixed-effects parameter estimates and the estimated variance components are all somewhat larger than those from ML, as would be expected.
Because the standard errors are larger for REML estimates, the p-values for the null hypothesis of no effect for a covariate or interaction are also larger.

The REML estimates are preferred for evaluating p-values for the fixed-effects coefficients, because they are more conservative.
However, REML estimates should not be used for comparing models in likelihood ratio tests or using various information criteria because the log-likelihood is not explicitly optimized.

In this package the `loglikelihood` extractor function does not return a value for a model fit by REML,
```julia
loglikelihood(m1)
```
hence all the other information criteria extractors also fail
```julia
aicc(m1)    # the corrected Akaike's Information Criterion
```

## Simulation of Type I error and power

The basic approach to simulating Type I error and power for a test is to simulate samples from the model, evaluate the test and accumulate the results.
Because it is possible to calculate the p-values we store these.

In practice, a simulation should be performed in a function to take advantage of the Just-In-Time (JIT) compilation of Julia functions but it helps first to show the development of the steps.

The p-values for the fixed-effects coefficients from a model fit are available as the `pvalues` property of the model.
```julia
m1.pvalues
```

A loop could be used to accumulate such p-values for a large number of simulated responses.
One of the great joys of programming in Julia is the ability to use `for` loops when convenient and not fear a catastrophic drop in efficiency.
In fact, `for` loops are often the most effective way of writing an iterative calculation.

Begin by creating the vector of vectors that will hold the result, say 10,000 replications of vectors of p-values, then run the loop to simulate a response, re-fit the model to the simulated response and extract and store the p-values.
The straightforward way to write a function to do such a simulation is
```julia
function simulatepvalues(rng::AbstractRNG, nsamp::Integer, m::LinearMixedModel;
        β = m.β, σ = m.σ, θ = m.θ)
    samp = Vector{Vector{Float64}}(undef, nsamp)
    for i in 1:nsamp
        refit!(simulate!(rng, m1, β = m.β, σ = m.σ, θ = m.θ), REML=true)
        samp[i] = m1.pvalues
    end
    samp
end
samp = simulatepvalues(rng, 10_000, m1, β = [1000., 0., 0., 0.], σ = 200., θ = [0.5,0.5]);
typeof(samp)
```

Because the simulation is carried out inside a function, which will be compiled by the JIT compiler, it is fast.
```julia
@time simulatepvalues(Random.MersenneTwister(1234), 10_000, m1, β = [1000., 0., 0., 0.], σ = 200., θ = [0.5,0.5]);
```

The first element of the vectors of p-values should be very small as the value of $\beta_1$ used in the simulations, $1000.0$, is much larger than a typical standard error for that coefficient in this model.
```julia
extrema(getindex.(samp, 1))
```

## Fitting alternative models to the same response

Define another model with random slopes with respect to `Noise` and random intercepts for both `S` and `I`.

```{julia}
m2 = LinearMixedModel(@formula(Y ~ 1 + Age * Noise + (1+Noise|S) + (1+Noise|I)), df,
     Dict(:Age => hc, :Noise => hc));
refit!(m2, response(m1))
```
